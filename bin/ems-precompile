#!/usr/bin/env node

var debug = require('debug')('ems:precompile');
var path = require('path');
var fs = require('fs');
var program = require('commander');
var _ = require("lodash");
var ems = require('..');

var pkg = require('../package.json');

program
    .version(pkg.version)
    .usage('<target>')
    .option('-s, --source-maps', 'write sourcemap files')
    .option('-e, --embed-mapping-comments', 'embed sourcemap url into created files')
    .option('-c, --compress', 'create gzipped files')
    .on('--help', function(){
        console.log('  Examples:');
        console.log('');
        console.log('    $ ems precompile');
        console.log('    $ ems precompile my-spa-application');
        console.log('    $ ems precompile /path/to/my-spa-application');
        console.log('');
    })
    .parse(process.argv);

debug('start precompile');

// Setup NODE ENV to production
debug('set env to production');
process.env.NODE_ENV = 'production';

var target = program.args[0] || process.cwd();
var targetPath = path.resolve(process.cwd(), target);
debug('setup target: %s', targetPath);

debug('check target');
if(fs.existsSync(targetPath)) {
    debug('target exists');
    debug('load target app');
    var app = require(targetPath);
    const bootstrapConf = {
        assets: {
            production: false
        },
        precompile: {
            options: {
                sourceMaps: program.sourceMaps,
                embedMappingComments: program.embedMappingComments,
                compress: program.compress
            }
        }
    };

    debug('start app bootstrap with some conf', bootstrapConf);
    app.bootstrap(bootstrapConf);

    debug('proof app assetPipeline');
    if(_.has(app, 'assetPipeline')) {
        debug('load manifest');
        var manifest = new app.assetPipeline.Mincer.Manifest(
            app.assetPipeline.environment,
            app.config.precompile.target
        );
        debug('fetch files to precompile');
        var files = app.config.precompile.files || [];
        if(app.config.precompile.fonts) {
            files = _.concat(files, ems.getPrecompileFonts());
        }

        if(app.config.precompile.images) {
            files = _.concat(files, ems.getPrecompileImages());
        }
        debug('start precompile');
        var data = manifest.compile(files, app.config.precompile.options);
        _.forEach(data.assets, function (compiled, raw) {
            console.log('compiled %s to %s', compiled, raw);
        });
    } else {
        console.error('Target application does not have a mincer asset pipeline');
    }
} else {
    debug('target does not exist');
    console.error('Target application '+target+' does not exists');
}


