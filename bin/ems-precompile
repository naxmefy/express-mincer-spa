#!/usr/bin/env node

var debug = require('debug')('ems:precompile');
var path = require('path');
var fs = require('fs');
var program = require('commander');
var _ = require("lodash");
var ems = require('..');

var pkg = require('../package.json');

program
    .version(pkg.version)
    .usage('<target>')
    .option('-s, --source-maps', 'write sourcemap files')
    .option('-e, --embed-mapping-comments', 'embed sourcemap url into created files')
    .option('-c, --compress', 'create gzipped files')
    .on('--help', function () {
        console.log('  Examples:');
        console.log('');
        console.log('    $ ems precompile');
        console.log('    $ ems precompile my-spa-application');
        console.log('    $ ems precompile /path/to/my-spa-application');
        console.log('');
    })
    .parse(process.argv);

debug('start precompile');

// Setup NODE ENV to production
debug('set env to production');
process.env.NODE_ENV = 'production';

var target = program.args[0] || process.cwd();
var targetPath = path.resolve(process.cwd(), target);
debug('setup target: %s', targetPath);

debug('check target');
if (fs.existsSync(targetPath)) {
    debug('target exists');
    debug('load target app');
    var app = require(targetPath);
    const bootstrapConf = {
        assets: {
            production: true
        },
        precompile: {
            options: {
                sourceMaps: program.sourceMaps,
                embedMappingComments: program.embedMappingComments,
                compress: program.compress
            }
        }
    };

    debug('start app bootstrap with some conf', bootstrapConf);
    app.bootstrap(bootstrapConf);

    var Mincer = app.config.assets.mincer || require('mincer');
    var Environment = new Mincer.Environment(app.config.assets.root);
    _.forEach(app.config.assets.paths, function (assetPath) {
        console.log('load asset path: %s', assetPath);
        Environment.appendPath(assetPath);
    });

    // Register an Helper for using inside Assets
    Environment.registerHelper('asset_path', function (name, opts) {
        var assetPath = null;
        var asset = Environment.findAsset(name, opts);
        if (!asset) throw new Error("File [" + name + "] not found");
        if (app.config.assets.production) {
            assetPath = '/assets/' + asset.digestPath;
        } else {
            assetPath = '/assets/' + asset.logicalPath;
        }
        return assetPath;
    });

    var files = app.config.precompile.files || [];
    if (app.config.precompile.fonts) {
        files = _.concat(files, ems.getPrecompileFonts());
    }
    
    if (app.config.precompile.images) {
        files = _.concat(files, ems.getPrecompileImages());
    }

    console.log(files);

    var Manifest = new Mincer.Manifest(Environment, app.config.precompile.target);
    var data = Manifest.compile(app.config.precompile.files, app.config.precompile.options);
    _.forEach(data.assets, function (raw, compiled) {
        console.log('compiled: %s to %s', compiled, raw);
    });
} else {
    debug('target does not exist');
    console.error('Target application ' + target + ' does not exists');
}


